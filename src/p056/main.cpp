#include <iostream>

using namespace std;

/**
 * 指针
 * 指针的作用：通过指针间接访问内存
 * 内存编号是从0开始记录的，一般用十六进制数字表示
 * 可以利用指针变量保存地址
 * @return
 */
int main() {
    // 指针变量的定义
    int a = 10; // 定义一个变量a
    int *p = &a; // 定义一个指针变量p，保存变量a的地址
    cout << "a = " << a << endl;
    cout << "&a = " << &a << endl;
    cout << "p = " << p << endl;
    cout << "*p = " << *p << endl;  // 通过解引用的方式访问内存 指针前加*
    *p = 30;
    cout << "a = " << a << endl;
    // 指针的大小
    cout << "sizeof(p) = " << sizeof(p) << endl;    // 32位系统4个字节，64位系统8个字节
    /*
     * 空指针
     * 空指针：指针变量指向内存中编号为0的空间
     * 用途：用于初始化指针变量，防止指针变量指向不确定的内存空间
     * 注意：空指针指向的内存空间不能访问
     */
    int *q = NULL;  // 空指针
    // *q = 10;    // 会报错
    cout << "q = " << q << endl;    // q = 0
    /*
     * 野指针
     * 指针变量指向非法的内存空间
     */
    int *z = (int *) 0x1000;    // 野指针
    // *z = 10;    // 会报错
    /*
     * const修饰指针
     * 有三种情况：
     *  1. const修饰指针    常量指针
     *      特点：指针的指向可以修改 指针指向的值不能修改
     *  2. const修饰常量    指针常量
     *      特点：指针的指向不能修改 指针指向的值可以修改
     *  3. const既修饰指针又修饰常量    常量指针常量
     *      特点：指针的指向和指针指向的值都不能修改
     */
    // 1. const修饰指针    常量指针
    const int *x = &a;  // 常量指针
    // *x = 20;    // 会报错
    // 2. const修饰常量    指针常量
    int *const y = &a;  // 指针常量
    // 3. const既修饰指针又修饰常量    常量指针常量
    const int *const w = &a;    // 常量指针常量
    /*
     * 利用指针访问数组中的元素
     */
    // 定义一个数组
    int arr[5] = {1, 2, 3, 4, 5};
    // 定义一个指针变量，保存数组的首地址
    int *arrP = arr;
    // 通过指针访问数组中的元素
    for (int i = 0; i < 5; ++i) {
        cout << *arrP << endl;
        arrP++; // 让指针后移4个字节
    }
}
